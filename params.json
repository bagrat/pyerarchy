{"name":"Pyerarchy","tagline":"Access directories like objects","body":"Pyerarchy\r\n=========\r\n\r\nPyerarchy is a Python package for easy file system surfing and manipulation. It enables to interact with the file system\r\ndirectly as Python objects without making implicit calls to ``os`` package. Finally it makes the code much more readable\r\nand nice.\r\n\r\n\r\nBasic Usage\r\n-----------\r\n\r\nThe central point of Pyerarchy is the Node. The basic usage starts by initializing an entry point Node and manipulating\r\nit further::\r\n\r\n    node = Node('entry/point/path')  # Initialize a new node\r\n\r\n    children = node.ls()  # List all child entities of the node\r\n    node.mkdir('newdir').mkdir('anotherdir')  # Create a new directory under node, and another one under the new one :)\r\n\r\n    # Now access the newly created directories\r\n    anotherdir = node/'newdir'/'anotherdir'  # This is the most common way to access nodes\r\n    children = node.newdir.anotherdir.ls()  # This method can be used to invoke an operation on the result node\r\n\r\n    # What about files?\r\n    myfile = node.myfile\r\n\r\n    # And even...\r\n    myfile = node.myfile.open('w')\r\n\r\n    # Or...\r\n    contents = node.myfile.read()  # ...which handles everything\r\n\r\n    # What if the filename contains a dot, dash, etc?\r\n    # Well...\r\n    myfile_node = node/'filename.with.dots-and-dashes'\r\n\r\n    # And then do your stuff on myfile_node\r\n    with myfile_node.open('r') as f:\r\n        ...\r\n\r\n    # Or again...\r\n    contents = myfile_node.read()\r\n\r\nAnother useful feature of Pyerarchy is very handy in Python modules to interact with static files included in the module::\r\n\r\n    static_data_node = ThisModuleNode()/'path/to/the/static/data/relative/to/module'\r\n\r\n    some_file_node = static_data_node/'some/static/text/file'\r\n\r\n    contents = some_file_node.read()\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}